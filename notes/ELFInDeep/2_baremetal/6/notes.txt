ARM Assembly Program to add two Numbers
----------------------------------------

	.text
start:                       @ Label, not really required
	mov   r0, #5	     @ Load register r0 with the value 5
	mov   r1, #4	     @ Load register r1 with the value 4
	add   r2, r1, r0     @ Add r0 and r1 and store in r2

stop:	b stop               @ Infinite loop to stop execution

The .text is an assembler directive, which says that the following instructions have to be assembled into the code section, rather than the .data section


Building the Binary
-------------------

Save the program in a file say add.s

To assemble the file, invoke the GNU Toolchain’s assembler as

$ arm-none-eabi-as -o add.o add.s

The -o option specifies the output filename.

To generate the executable file, invoke the GNU Toolchain’s linker ld, as shown in the following command.

$ arm-none-eabi-ld -Ttext=0x0 -o add.elf add.o

Here again, the -o option specifies the output filename

The -Ttext=0x0, specifies that addresses should be assigned to the labels, such that the instructions were starting from address 0x0

To view the address assignment for various labels, the nm command can be used as shown below.

$ arm-none-eabi-nm add.elf

Note the address assignment for the labels start and stop

The address assigned for start is 0x0. Since it is the label of the first instruction

The label stop is after 3 instructions. Each instructions is 4 bytes

Hence stop is assigned an address 12 (0xC).

Linking with a different base address for the instructions will result in a different set of addresses being assigned to the labels.

$ arm-none-eabi-ld -Ttext=0x20000000 -o add.elf add.o

$ arm-none-eabi-nm add.elf



