Sum of an Array
==================

The following code sums an array of bytes and stores the result in r3

        .text
entry:  b start                 @ Skip over the data
arr:    .byte 10, 20, 25        @ Read-only array of bytes
eoa:                            @ Address of end of array + 1

        .align
start:
        ldr   r0, =eoa          @ r0 = &eoa
        ldr   r1, =arr          @ r1 = &arr
        mov   r3, #0            @ r3 = 0
loop:   ldrb  r2, [r1], #1      @ r2 = *r1++
        add   r3, r2, r3        @ r3 += r2
        cmp   r1, r0            @ if (r1 != r2)
        bne   loop              @    goto loop
stop:   b stop

The code introduces two new assembler directives - .byte and .align

.byte directive
--------------

The byte sized arguments of .byte are assembled into consecutive bytes in memory.

There are similar directives .2byte and .4byte for storing 16 bit values and 32 bit values, respectively.

The general syntax is given below.

.byte   exp1, exp2, ...
.2byte  exp1, exp2, ...
.4byte  exp1, exp2, ...

The arguments could be simple integer literal, represented as binary (prefixed by 0b or 0B), octal (prefixed by 0), decimal or hexadecimal (prefixed by 0x or 0X). 

The integers could also be represented as character constants (character surrounded by single quotes), in which case the ASCII value of the character will be used.

pattern:  .byte 0b01010101, 0b00110011, 0b00001111
npattern: .byte npattern - pattern
halpha:   .byte 'A', 'B', 'C', 'D', 'E', 'F'
dummy:    .4byte 0xDEADBEEF
nalpha:   .byte 'Z' - 'A' + 1

.align directive
------------------

ARM requires that the instructions to be present in 32-bit aligned memory locations.

The address of the first byte, of the 4 bytes in an instruction should be a multiple of 4.

 To adhere to this, the .align directive can be used to insert padding bytes till the next byte address will be a multiple of 4.

This is required only when data bytes or half words are inserted within code.

